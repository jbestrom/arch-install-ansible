---
- hosts: localhost
  name: bootstrap Arch Linux BTW system
  connection: local

  vars_prompt:
    - name: user_password
      prompt: "user password:"
      encrypt: "sha512_crypt"
      private: yes
      confirm: yes

  pre_tasks:
    - include_vars: "host_vars/{{ machine_aliases[ansible_product_name] }}"

    - set_fact:
        user_password: "{{ user_password }}"

    #- name: Abort if the host is not booted from the Arch install media
    #  fail:
    #    msg: "This host is not booted from the Arch install media!"
    #    when: ansible_nodename != 'archiso'

    - name: Synchronize clock via NTP
      command: timedatectl set-ntp true

  tasks:
    - import_role:
        name: arch-bootstrap

  post_tasks:

    # Prepare for chroot to new install location.
    - name: mount proc
      mount:
        src: proc
        path: "{{ arch_root }}/proc"
        fstype: proc
        state: mounted

    - name: mount temporary api systems
      mount:
        src: "/{{ item }}"
        path: "{{ arch_root }}/{{ item }}"
        opts: bind
        fstype: none
        state: mounted
      with_items:
          - sys
          - dev
          - run

    - name: Mount efivars read-only to avoid EFIgeddon
      mount:
        src: efivarfs
        path: /mnt/sys/firmware/efi/efivars
        fstype: efivarfs
        state: mounted

    - name: copy resolv.conf into chroot
      copy:
        src: /etc/resolv.conf
        dest: "{{ arch_root }}/etc/resolv.conf"


- hosts: chroot
  name: install minimal Arch Linux system
  connection: chroot

  pre_tasks:
    - include_vars: "host_vars/{{ machine_aliases[ansible_product_name] }}"

  roles:
    - arch-install
  
  tasks:
    - debug:
        var: es
    #    - import_role:
    #    name:  "{{ es }}"
    #  when: es | length > 0

- hosts: localhost
  connection: local
  name: finish up installation
  tasks:
    #    - name: copy playbook to newly installed system
    # command: "cp -ar {{ playbook_dir }} {{ arch_root }}/home/{{ user.name }}"

    #- name: unmount partitions with the new system
    #  command: umount -Rf {{ arch_root }}
    
        #    - name: reboot
        #      command: reboot
